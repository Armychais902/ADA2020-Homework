//discusss with b08902056, b08902080
#include <iostream>
#include <vector>
#include "helper.h"
using namespace std;
/*constraint
each row 1~81
each col 82~162
each box 163~243
each cell 244~324
each block 325~325+9*c-1
*/

/*row
1~9 in each cell 0~728
each comb 729~
*/
int comb[10][21][12] = {\
    {{0}},\
    {{1},{2},{3},{4},{5},{6},{7},{8},{9}},\
    {{12}, {13}, {14,23}, {15,24}, {16,25,34}, {17,26,35}, {18,27,36,45}, {19,28,37,46}, {29,38,47,56}, {39,48,57}, {49,58,67}, {59,68}, {69,78}, {79}, {89}},\
    {{123}, {124}, {125, 134}, {126, 135, 234}, {127, 136, 145, 235}, {128, 137, 146, 236, 245}, {129, 138, 147, 156, 237, 246, 345}, {139, 148, 157, 238, 247, 256, 346}, {149, 158, 167, 239, 248, 257, 347, 356}, {159, 168, 249, 258, 267, 348, 357, 456}, {169, 178, 259, 268, 349, 358, 367, 457}, {179, 269, 278, 359, 368, 458, 467}, {189, 279, 369, 378, 459, 468, 567}, {289, 379, 469, 478, 568}, {389, 479, 569, 578}, {489, 579, 678}, {589, 679}, {689}, {789}},\
    {{1234}, {1235}, {1236, 1245}, {1237, 1246, 1345}, {1238, 1247, 1256, 1346, 2345}, {1239, 1248, 1257, 1347, 1356, 2346}, {1249, 1258, 1267, 1348, 1357, 1456, 2347, 2356}, {1259, 1268, 1349, 1358, 1367, 1457, 2348, 2357, 2456}, {1269, 1278, 1359, 1368, 1458, 1467, 2349, 2358, 2367, 2457, 3456}, {1279, 1369, 1378, 1459, 1468, 1567, 2359, 2368, 2458, 2467, 3457}, {1289, 1379, 1469, 1478, 1568, 2369, 2378, 2459, 2468, 2567, 3458, 3467}, {1389, 1479, 1569, 1578, 2379, 2469, 2478, 2568, 3459, 3468, 3567}, {1489, 1579, 1678, 2389, 2479, 2569, 2578, 3469, 3478, 3568, 4567}, {1589, 1679, 2489, 2579, 2678, 3479, 3569, 3578, 4568}, {1689, 2589, 2679, 3489, 3579, 3678, 4569, 4578}, {1789, 2689, 3589, 3679, 4579, 4678}, {2789, 3689, 4589, 4679, 5678}, {3789, 4689, 5679}, {4789, 5689}, {5789}, {6789}},\
    {{12345}, {12346}, {12347, 12356}, {12348, 12357, 12456}, {12349, 12358, 12367, 12457, 13456}, {12359, 12368, 12458, 12467, 13457, 23456}, {12369, 12378, 12459, 12468, 12567, 13458, 13467, 23457}, {12379, 12469, 12478, 12568, 13459, 13468, 13567, 23458, 23467}, {12389, 12479, 12569, 12578, 13469, 13478, 13568, 14567, 23459, 23468, 23567},{12489, 12579, 12678, 13479, 13569, 13578, 14568, 23469, 23478, 23568, 24567}, {12589, 12679, 13489, 13579, 13678, 14569, 14578, 23479, 23569, 23578, 24568, 34567}, {12689, 13589, 13679, 14579, 14678, 23489, 23579, 23678, 24569, 24578, 34568}, {12789, 13689, 14589, 14679, 15678, 23589, 23679, 24579, 24678, 34569, 34578}, {13789, 14689, 15679, 23689, 24589, 24679, 25678, 34579, 34678}, {14789, 15689, 23789, 24689, 25679, 34589, 34679, 35678}, {15789, 24789, 25689, 34689, 35679, 45678}, {16789, 25789, 34789, 35689, 45679}, {26789, 35789, 45689}, {36789, 45789}, {46789}, {56789}},\
    {{123456}, {123457}, {123458, 123467}, {123459, 123468, 123567}, {123469, 123478, 123568, 124567}, {123479, 123569, 123578, 124568, 134567}, {123489, 123579, 123678, 124569, 124578, 134568, 234567}, {123589, 123679, 124579, 124678, 134569, 134578, 234568}, {123689, 124589, 124679, 125678, 134579, 134678, 234569, 234578}, {123789, 124689, 125679, 134589, 134679, 135678, 234579, 234678}, {124789, 125689, 134689, 135679, 145678, 234589, 234679, 235678}, {125789, 134789, 135689, 145679, 234689, 235679, 245678}, {126789, 135789, 145689, 234789, 235689, 245679, 345678}, {136789, 145789, 235789, 245689, 345679}, {146789, 236789, 245789, 345689}, {156789, 246789, 345789}, {256789, 346789}, {356789}, {456789}}, \
    {{1234567}, {1234568}, {1234569, 1234578}, {1234579, 1234678}, {1234589, 1234679, 1235678}, {1234689, 1235679, 1245678}, {1234789, 1235689, 1245679, 1345678}, {1235789, 1245689, 1345679, 2345678}, {1236789, 1245789, 1345689, 2345679}, {1246789, 1345789, 2345689}, {1256789, 1346789, 2345789}, {1356789, 2346789}, {1456789, 2356789}, {2456789}, {3456789}},\
    {{12345678}, {12345679}, {12345689}, {12345789}, {12346789}, {12356789}, {12456789}, {13456789}, {23456789}},\
    {{123456789}}
};
int header[10]={0,1,3,6,10,15,21,28,36,45};

class cage{
    public:
        int sum;
        int num;
        int index;
        int end;
};

void processComb(long long int comp,vector<int>& fin){
    fin.clear();
    vector<int> set(10,0);
    while(comp!=0){
        set[comp%10]=1;
        comp/=10;
    }
    for(int i=1;i<=9;i++){
        if(set[i]==0)
            fin.push_back(i);
    }
}

int main(){
    char board[10][10];
    cage cages[127];    //content start from 33, sparse, cage index start from 0
    for(int i=0;i<127;i++){
        cages[i].sum=0;
        cages[i].num=0;
        cages[i].index=0;
        cages[i].end=0;
    }
    
    for(int i=1;i<=9;i++){
        for(int j=1;j<=9;j++){
            cin>>board[i][j];
            cages[board[i][j]].num++;
        }
    }

    char tmp;
    int k;
    int c=0;
    while(cin>>tmp>>k){
        cages[tmp].sum=k;
        int cntcomb=0;
        while (comb[cages[tmp].num][cages[tmp].sum-header[cages[tmp].num]][cntcomb]!=0){
            cntcomb++;
        }
        cages[tmp].end=cntcomb;
        cages[tmp].index=c;
        c++;
    }

    DLX::Init(324+9*c);
    //cout<<"total:"<<324+2*9*c<<endl;

    //1~9 in each cell
    for(int i=1;i<=9;i++){
        for(int j=1;j<=9;j++){
            for(int dig=1;dig<=9;dig++){
                vector<int> sol;
                sol.push_back(9*(i-1)+dig);
                //cout<<"each row "<<9*(i-1)+dig<<" ";
                sol.push_back(81+9*(j-1)+dig);
                //cout<<"each col "<<81+9*(j-1)+dig<<" ";
                int boxno=((i-1)/3)*3+(j-1)/3+1;
                sol.push_back(162+9*(boxno-1)+dig);
                sol.push_back(243+9*(i-1)+j);
                //cout<<"each box "<<162+9*(boxno-1)+dig<<" each cell "<<243+9*(i-1)+j;
                int cageno=cages[board[i][j]].index;
                //cout<<" cageno "<<cageno<<endl;
                sol.push_back(324+9*cageno+dig);

                /*for(int si=0;si<sol.size();si++)
                    cout<<sol[si]<<" ";
                cout<<endl;*/
                DLX::AddRow(81*(i-1)+9*(j-1)+dig,sol);  // row index start from 0
            }
        }
    }

    //each block
    int cnt_comb=0;
    for(int i=33;i<127;i++){
        if(cages[i].num==0)
            continue;
        
        for(int j=0;j<cages[i].end;j++){
            vector<int> sol;
            long long int comp=comb[cages[i].num][cages[i].sum-header[cages[i].num]][j];
            vector<int> fin;
            processComb(comp,fin);
            for(int dig=0;dig<fin.size();dig++){
                sol.push_back(fin[dig]+324+9*cages[i].index);
                //cout<<fin[dig]<<" ";
            }//cout<<endl;
            if(sol.size()==0)
                continue;
            cnt_comb++;
            /*for(int si=0;si<sol.size();si++)
                cout<<sol[si]<<" ";
            cout<<endl;*/
            DLX::AddRow(729+cnt_comb,sol);
        }
    }

    vector<int> selected=DLX::Solver();
    //cout<<selected.size()<<endl;
    int finalboard[10][10]={0};
    for(int i=0;i<selected.size();i++){
        if(selected[i]>729)
            continue;
        else{
            //cout<<selected[i]<<endl;
            int r=(selected[i]-1)/81;
            int c=((selected[i]-1)%81)/9;
            int dig=((selected[i]-1)%81)%9;
            finalboard[r+1][c+1]=dig+1;
        }
    }
    for(int i=1;i<=9;i++){
        for(int j=1;j<=9;j++){
            cout<<finalboard[i][j];
        }cout<<endl;
    }
    return 0;
}
